name: toolchain-container

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `1.2.3` tags as releases.
    tags: '*.*.*'

  # Just try to build the container on PRs.
  pull_request:

env:
  IMAGE_NAME: arm-llvm-toolchain
  DOCKERFILE: env/Dockerfile

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build the container
        run: docker build . --file ${DOCKERFILE}

  # Push image to Docker Hub
  # TODO: merge this and `push-gh` into one job; doesn't make sense to build the container multiple times
  push-dh:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: rrbutani/${{ env.IMAGE_NAME }}
          dockerfile: ${{ env.DOCKERFILE }}
          tag_with_ref: true
          tag_with_sha: true

  # Push image to GitHub Packages.
  push-gh:
    # Only if the build was successful.
    needs: build

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build -t image -f ${DOCKERFILE} .

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
